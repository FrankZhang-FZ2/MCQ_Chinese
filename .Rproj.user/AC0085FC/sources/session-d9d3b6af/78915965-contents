---
title: "MCQ Chinese"
author: "Qilin Zhang"
date: "2023-10-04"
output: html_document
---

```{r pac, message = FALSE, include=FALSE}
library(summarytools)
library(tidyverse) #data wrangling
library(codebook) #codebook generation
library(future) #reliability
library(ufs) #reliability
library(GGally) #reliability
library(GPArotation) #reliability
library(rio) #reading in different file types
library(labelled) #labeling data
library(psych)
library(corrplot) 
library(psych)
library(mirt)
library(eRm)
library(mice)
library(lavaan)
library(semPlot)
library(parameters)
library(broom)
library(likert)
library(sjPlot)
library(readxl)
library(foreign)
library(lme4)
library(lmerTest)
library(mvnormtest)
library(mvnormalTest)
library(ggpubr)
library(rstatix)
library(heplots)
```

### cleaning
```{r import, include = FALSE}

## use other read functions as appropriate for file type

dict <- read_excel("Data/CLS_dictionary.xlsx") #dictionary

data <- read_excel("Data/CLS_cleaned.xlsx") #data

#prepare the data just for MCQ analysis

MCQ_CN <- data[,c(grep("MCQ_1$",colnames(data)):grep("MCQ_30",colnames(data)))]

## Variable types

names <- dict %>% 
  filter(type == "numeric") %>% 
  pull(variable)
data[,names] <- 
  lapply(data[,names], as.numeric)

rm(names)
```

```{r missing}
#function for checking percentage of missing data (unit=%)
percent_missing <- function(x){
  sum(is.na((x))/length(x)*100)
}
missing_R <- apply(MCQ_CN,1,percent_missing)
table(missing_R)

#check where the NAs are if needed
rindex <- rep(FALSE, nrow(MCQ_CN))
for (i in 1:nrow(MCQ_CN)){
  for (j in 1:grep("MCQ_30",colnames(MCQ_CN))){
    if( is.na(MCQ_CN[i,j])){
      rindex[i] = TRUE
      j = ncol(MCQ_CN)+1
    }
  }
}
data_error <- MCQ_CN[rindex,]

rm(data_error)

#use if don't want imputation(turn off if I need imputation)
MCQ_CN <- subset(MCQ_CN, missing_R<=0)


##remove people that gave 90% of the same answer in MCQ

for(i in 1:5){
  percent <- function(x){
  sum((x == i)/length(x)*100)
  }
  number <- apply(MCQ_CN,1,percent)
  MCQ_CN <- MCQ_CN[c(number<90),]
}
```

###assumption
``` {R assumption}
## assumption check
random_variable <- rchisq(nrow(MCQ_CN), 7)# use Chi-square here because error terms are likely chi-sqaure distributed
fake_model <- lm(random_variable ~ ., 
                 MCQ_CN) # prediction here should be random because the error is randomized
standardized <- rstudent(fake_model) # standardize error terms
fitvalues <- scale(fake_model$fitted.values)
plot(fake_model,2)#check for linearity
#We assume the multivariate relationship between continuous variables is linear (i.e., no curved)
#There are many ways to test this, but we can use a QQ/PP Plot to examine for linearity

hist(standardized)#check for normality
#We expect that the residuals are normally distributed (centered at 0 and most of the data between -2 - 2)
#Not that the *sample* is normally distributed 
#Generally, SEM requires a large sample size, thus, buffering against normality deviations

{plot(standardized, fitvalues)
  abline(v = 0)
  abline(h = 0)
}#check for homogeneity + Homoscedasticity
#These assumptions are about equality of the variances
#We assume equal variances between groups for things like t-tests, ANOVA
#Here the assumption is equality in the spread of variance across predicted values 


#assumption about correlation
cor_matrix <- 
  MCQ_CN%>%
  cor() # check correlation between two variables

cor_matrix

corrplot(cor_matrix)

cortest.bartlett(cor_matrix, n = nrow(MCQ_CN))


#multivariate normality
mardia(MCQ_CN)
mvnTest(MCQ_CN)
mshapiro_test(MCQ_CN)
```

###CFA
```{r CFA_overall}

(MCQ_CN_overall_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6 + H + C + F + L + P + R
H =~ MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10
C =~ MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14
F =~ MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18
L =~ MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22
P =~ MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26
R =~ MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
')

MCQ_CN_overall_fit <- cfa(
  model = MCQ_CN_overall_model,
  data = MCQ_CN,
  std.lv = TRUE)

summary(MCQ_CN_overall_fit,
        standardized = TRUE,
        rsquare = TRUE,
        fit.measures=TRUE)

parameterestimates(MCQ_CN_overall_fit,
                   standardized = TRUE)

fitmeasures(MCQ_CN_overall_fit)

modificationindices(MCQ_CN_overall_fit,sort = T)

semPaths(MCQ_CN_overall_fit,
         whatLabels = "std",
         what = "std",
         layout = "tree2",
         edge.label.cex = 1)

model_parameters(MCQ_CN_overall_fit, standardize = TRUE)

```


```{r CFA_GM}

(MCQ_CN_GM_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6 + MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10 + MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14 + MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18 + MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22 + MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26 + MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
')

MCQ_CN_GM_fit <- cfa(
  model = MCQ_CN_GM_model,
  data = MCQ_CN,
  std.lv = TRUE)

summary(MCQ_CN_GM_fit,
        standardized = TRUE,
        rsquare = TRUE,
        fit.measures=TRUE)

parameterestimates(MCQ_CN_GM_fit,
                   standardized = TRUE)

fitmeasures(MCQ_CN_GM_fit)

modificationindices(MCQ_CN_GM_fit,sort = T)

semPaths(MCQ_CN_GM_fit,
         whatLabels = "std",
         what = "std",
         layout = "tree2",
         edge.label.cex = 1)

model_parameters(MCQ_CN_GM_fit, standardize = TRUE)

```

##Honesty

```{r CFA_H}

(MCQ_CN_H_model <- '
H =~ MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10
')

MCQ_CN_H_fit <- cfa(
  model = MCQ_CN_H_model,
  data = MCQ_CN,
  std.lv = TRUE)

summary(MCQ_CN_H_fit,
        standardized = TRUE,
        rsquare = TRUE,
        fit.measures=TRUE)

parameterestimates(MCQ_CN_H_fit,
                   standardized = TRUE)

fitmeasures(MCQ_CN_H_fit)

modificationindices(MCQ_CN_H_fit,sort = T)

semPaths(MCQ_CN_H_fit,
         whatLabels = "std",
         what = "std",
         layout = "tree2",
         edge.label.cex = 1)

model_parameters(MCQ_CN_H_fit, standardize = TRUE)

```

##compassion

```{r CFA_C}

(MCQ_CN_C_model <- '
C =~ MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14
')

MCQ_CN_C_fit <- cfa(
  model = MCQ_CN_C_model,
  data = MCQ_CN,
  std.lv = TRUE)

summary(MCQ_CN_C_fit,
        standardized = TRUE,
        rsquare = TRUE,
        fit.measures=TRUE)

parameterestimates(MCQ_CN_C_fit,
                   standardized = TRUE)

fitmeasures(MCQ_CN_C_fit)

modificationindices(MCQ_CN_C_fit,sort = T)

semPaths(MCQ_CN_C_fit,
         whatLabels = "std",
         what = "std",
         layout = "tree2",
         edge.label.cex = 1)

model_parameters(MCQ_CN_C_fit, standardize = TRUE)

```

##Fairness

```{r CFA_F}

(MCQ_CN_F_model <- '
F =~ MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18
')

MCQ_CN_F_fit <- cfa(
  model = MCQ_CN_F_model,
  data = MCQ_CN,
  std.lv = TRUE)

summary(MCQ_CN_F_fit,
        standardized = TRUE,
        rsquare = TRUE,
        fit.measures=TRUE)

parameterestimates(MCQ_CN_F_fit,
                   standardized = TRUE)

fitmeasures(MCQ_CN_F_fit)

modificationindices(MCQ_CN_F_fit,sort = T)

semPaths(MCQ_CN_F_fit,
         whatLabels = "std",
         what = "std",
         layout = "tree2",
         edge.label.cex = 1)

model_parameters(MCQ_CN_F_fit, standardize = TRUE)

```

##Loyalty

```{r CFA_L}

(MCQ_CN_L_model <- '
L =~ MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22
')

MCQ_CN_L_fit <- cfa(
  model = MCQ_CN_L_model,
  data = MCQ_CN,
  std.lv = TRUE)

summary(MCQ_CN_L_fit,
        standardized = TRUE,
        rsquare = TRUE,
        fit.measures=TRUE)

parameterestimates(MCQ_CN_L_fit,
                   standardized = TRUE)

fitmeasures(MCQ_CN_L_fit)

modificationindices(MCQ_CN_L_fit,sort = T)

semPaths(MCQ_CN_L_fit,
         whatLabels = "std",
         what = "std",
         layout = "tree2",
         edge.label.cex = 1)

model_parameters(MCQ_CN_L_fit, standardize = TRUE)

```

###Purity

```{r CFA_P}

(MCQ_CN_P_model <- '
P =~ MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26
')

MCQ_CN_P_fit <- cfa(
  model = MCQ_CN_P_model,
  data = MCQ_CN,
  std.lv = TRUE)

summary(MCQ_CN_P_fit,
        standardized = TRUE,
        rsquare = TRUE,
        fit.measures=TRUE)

parameterestimates(MCQ_CN_P_fit,
                   standardized = TRUE)

fitmeasures(MCQ_CN_P_fit)

modificationindices(MCQ_CN_P_fit,sort = T)

semPaths(MCQ_CN_P_fit,
         whatLabels = "std",
         what = "std",
         layout = "tree2",
         edge.label.cex = 1)

model_parameters(MCQ_CN_P_fit, standardize = TRUE)

```

##Respect

```{r CFA_R}

(MCQ_CN_R_model <- '
R =~ MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
')

MCQ_CN_R_fit <- cfa(
  model = MCQ_CN_R_model,
  data = MCQ_CN,
  std.lv = TRUE)

summary(MCQ_CN_R_fit,
        standardized = TRUE,
        rsquare = TRUE,
        fit.measures=TRUE)

parameterestimates(MCQ_CN_R_fit,
                   standardized = TRUE)

fitmeasures(MCQ_CN_R_fit)

modificationindices(MCQ_CN_R_fit,sort = T)

semPaths(MCQ_CN_R_fit,
         whatLabels = "std",
         what = "std",
         layout = "tree2",
         edge.label.cex = 1)

model_parameters(MCQ_CN_R_fit, standardize = TRUE)

```

## EFA

```{r EFA}

#Kaiser Criterion
ev<- eigen(cor(MCQ_CN))
ev$values
sum(ev$values > 1)
sum(ev$values > .7)

#scree plot and parallel analysis
scree(MCQ_CN, pc=FALSE)
fa.parallel(MCQ_CN,
            fm="ml",
            fa="fa")

EFA_fit_MCQ_CN <- fa(MCQ_CN[7:30],
             nfactors = 2,
             rotate = "oblimin",
             fm="ml")
EFA_fit_MCQ_CN
print(EFA_fit_MCQ_CN$loadings, cutoff = 0.3)
print(EFA_fit_MCQ_CN$loadings)

##fit indices
EFA_fit_MCQ_CN$rms  # Root mean square of the residuals (lower the better)
EFA_fit_MCQ_CN$RMSEA # root mean squared error of approximation (lower the better)
EFA_fit_MCQ_CN$TLI  # tucker lewis index
1- ((EFA_fit_MCQ_CN$STATISTIC-EFA_fit_MCQ_CN$dof)/
      (EFA_fit_MCQ_CN$null.chisq-EFA_fit_MCQ_CN$null.dof))  #CFI
```

### IRT

```{R IRT}

MCQ_IRT = mirt(data = MCQ_CN,
      model = 1, #this is for one factor
      itemtype = "gpcmIRT" #generalized partial credit model
)
summary(MCQ_IRT)
coef(MCQ_IRT, IRTpars = T)
#itemplot(MCQ_IRT, 1, type = "trace")
itemplot(MCQ_IRT, 1, type = "info")
plot(MCQ_IRT, type = "trace")
plot(MCQ_IRT, type = "info")
plot(MCQ_IRT) #expected score curve
#person fit
#fscores(MCQ_IRT) #factor score for each participants
#mirt::itemfit(MCQ_IRT)
#mirt::personfit(MCQ_IRT)


```