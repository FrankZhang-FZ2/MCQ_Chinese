H =~ MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10
C =~ MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14
F =~ MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18
L =~ MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22
P =~ MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26
R =~ MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
'
MCQ_CN_7M_fit <- cfa(
model = MCQ_CN_7M_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_7M_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
semPaths(MCQ_CN_7M_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
View(MCQ_CN)
fitmeasures(MCQ_CN_7M_fit)
View(data)
## use other read functions as appropriate for file type
dict <- read_excel("Data/CLS_dictionary.xlsx") #dictionary
data <- read_excel("Data/CLS_cleaned.xlsx") #data
#prepare the data just for MCQ analysis
MCQ_CN <- data[,c(grep("MCQ_1$",colnames(data)):grep("MCQ_30",colnames(data)))]
## Variable types
names <- dict %>%
filter(type == "numeric") %>%
pull(variable)
data[,names] <-
lapply(data[,names], as.numeric)
rm(names)
#function for checking percentage of missing data (unit=%)
percent_missing <- function(x){
sum(is.na((x))/length(x)*100)
}
missing_R <- apply(MCQ_CN,1,percent_missing)
table(missing_R)
#check where the NAs are if needed
rindex <- rep(FALSE, nrow(MCQ_CN))
for (i in 1:nrow(MCQ_CN)){
for (j in 1:grep("MCQ_30",colnames(MCQ_CN))){
if( is.na(MCQ_CN[i,j])){
rindex[i] = TRUE
j = ncol(MCQ_CN)+1
}
}
}
data_error <- MCQ_CN[rindex,]
rm(data_error)
#use if don't want imputation(turn off if I need imputation)
MCQ_CN <- subset(MCQ_CN, missing_R<=0)
##remove people that gave 90% of the same answer in MCQ
for(i in 1:5){
percent <- function(x){
sum((x == i)/length(x)*100)
}
number <- apply(MCQ_CN,1,percent)
MCQ_CN <- MCQ_CN[c(number<90),]
}
## assumption check
random_variable <- rchisq(nrow(MCQ_CN), 7)# use Chi-square here because error terms are likely chi-sqaure distributed
fake_model <- lm(random_variable ~ .,
MCQ_CN) # prediction here should be random because the error is randomized
standardized <- rstudent(fake_model) # standardize error terms
fitvalues <- scale(fake_model$fitted.values)
plot(fake_model,2)#check for linearity
hist(standardized)#check for normality
{plot(standardized, fitvalues)
abline(v = 0)
abline(h = 0)
}#check for homogeneity + Homoscedasticity
#assumption about correlation
cor_matrix <-
MCQ_CN%>%
cor() # check correlation between two variables
cor_matrix
corrplot(cor_matrix)
cortest.bartlett(cor_matrix, n = nrow(MCQ_CN))
corrplot(cor_matrix)
cortest.bartlett(cor_matrix, n = nrow(MCQ_CN))
#multivariate normality
mardia(MCQ_CN)
(MCQ_CN_7M_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6 + H + C + F + L + P + R
H =~ MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10
C =~ MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14
F =~ MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18
L =~ MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22
P =~ MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26
R =~ MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
')
MCQ_CN_7M_fit <- cfa(
model = MCQ_CN_7M_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_7M_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
fitmeasures(MCQ_CN_7M_fit)
semPaths(MCQ_CN_7M_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
(MCQ_CN_GM_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6 + MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10 + MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14 + MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18 + MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22 + MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26 + MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
')
MCQ_CN_GM_fit <- cfa(
model = MCQ_CN_GM_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_GM_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
semPaths(MCQ_CN_GM_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
summary(MCQ_CN_GM_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
(MCQ_CN_GM_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6
')
MCQ_CN_GM_fit <- cfa(
model = MCQ_CN_GM_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_GM_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
(MCQ_CN_H_model <- '
H =~ MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10
')
MCQ_CN_H_fit <- cfa(
model = MCQ_CN_H_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_H_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
modificationindices(MCQ_CN_H_fit,sort = T)
semPaths(MCQ_CN_H_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
summary(MCQ_CN_H_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
(MCQ_CN_C_model <- '
C =~ MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14
')
MCQ_CN_C_fit <- cfa(
model = MCQ_CN_C_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_C_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
parameterestimates(MCQ_CN_C_fit,
standardized = TRUE)
fitmeasures(MCQ_CN_C_fit)
modificationindices(MCQ_CN_C_fit,sort = T)
semPaths(MCQ_CN_C_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
(MCQ_CN_F_model <- '
F =~ MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18
')
MCQ_CN_F_fit <- cfa(
model = MCQ_CN_F_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_F_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
parameterestimates(MCQ_CN_F_fit,
standardized = TRUE)
fitmeasures(MCQ_CN_F_fit)
modificationindices(MCQ_CN_F_fit,sort = T)
semPaths(MCQ_CN_F_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
(MCQ_CN_L_model <- '
L =~ MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22
')
MCQ_CN_L_fit <- cfa(
model = MCQ_CN_L_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_L_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
parameterestimates(MCQ_CN_L_fit,
standardized = TRUE)
fitmeasures(MCQ_CN_L_fit)
modificationindices(MCQ_CN_L_fit,sort = T)
semPaths(MCQ_CN_L_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
(MCQ_CN_P_model <- '
P =~ MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26
')
MCQ_CN_P_fit <- cfa(
model = MCQ_CN_P_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_P_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
parameterestimates(MCQ_CN_P_fit,
standardized = TRUE)
fitmeasures(MCQ_CN_P_fit)
modificationindices(MCQ_CN_P_fit,sort = T)
semPaths(MCQ_CN_P_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
(MCQ_CN_R_model <- '
R =~ MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
')
MCQ_CN_R_fit <- cfa(
model = MCQ_CN_R_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_R_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
parameterestimates(MCQ_CN_R_fit,
standardized = TRUE)
fitmeasures(MCQ_CN_R_fit)
modificationindices(MCQ_CN_R_fit,sort = T)
semPaths(MCQ_CN_R_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
(MCQ_CN_GM_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6 + MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10 + MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14 + MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18 + MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22 + MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26 + MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
')
MCQ_CN_GM_fit <- cfa(
model = MCQ_CN_GM_model,
data = MCQ_CN,
std.lv = TRUE)
parameterestimates(MCQ_CN_GM_fit,
standardized = TRUE)
fitmeasures(MCQ_CN_GM_fit)
modificationindices(MCQ_CN_GM_fit,sort = T)
semPaths(MCQ_CN_GM_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
summary(MCQ_CN_GM_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
(MCQ_CN_overall_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6 + H + C + F + L + P + R
H =~ MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10
C =~ MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14
F =~ MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18
L =~ MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22
P =~ MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26
R =~ MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
')
MCQ_CN_overall_fit <- cfa(
model = MCQ_CN_overall_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_overall_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
parameterestimates(MCQ_CN_overall_fit,
standardized = TRUE)
fitmeasures(MCQ_CN_overall_fit)
modificationindices(MCQ_CN_overall_fit,sort = T)
semPaths(MCQ_CN_overall_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
model_parameters(MCQ_CN_overall_fit, standardize = TRUE)
(MCQ_CN_GM_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6 + MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10 + MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14 + MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18 + MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22 + MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26 + MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
')
MCQ_CN_GM_fit <- cfa(
model = MCQ_CN_GM_model,
data = MCQ_CN,
std.lv = TRUE)
parameterestimates(MCQ_CN_GM_fit,
standardized = TRUE)
fitmeasures(MCQ_CN_GM_fit)
modificationindices(MCQ_CN_GM_fit,sort = T)
(MCQ_CN_overall_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6 + H + C + F + L + P + R
H =~ MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10
C =~ MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14
F =~ MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18
L =~ MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22
P =~ MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26
R =~ MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
')
MCQ_CN_overall_fit <- cfa(
model = MCQ_CN_overall_model,
data = MCQ_CN,
std.lv = TRUE)
modificationindices(MCQ_CN_overall_fit,sort = T)
(MCQ_CN_overall_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6 + H + C + F + L + P + R
H =~ MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10
C =~ MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14
F =~ MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18
L =~ MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22
P =~ MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26
R =~ MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
H ~~L
')
MCQ_CN_overall_fit <- cfa(
model = MCQ_CN_overall_model,
data = MCQ_CN,
std.lv = TRUE)
semPaths(MCQ_CN_overall_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
(MCQ_CN_overall_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6 + H + C + F + L + P + R
H =~ MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10
C =~ MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14
F =~ MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18
L =~ MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22
P =~ MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26
R =~ MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
H ~~ C
H ~~ F
H ~~ L
H ~~ P
H ~~ R
C ~~ F
C ~~ L
C ~~ P
C ~~ R
F ~~ L
F ~~ P
F ~~ R
L ~~ P
L ~~ R
P ~~ R
')
MCQ_CN_overall_fit <- cfa(
model = MCQ_CN_overall_model,
data = MCQ_CN,
std.lv = TRUE)
EFA_fit_MCQ_CN <- fa(MCQ_CN,
nfactors = 6,
rotate = "oblimin",
fm="ml")
EFA_fit_MCQ_CN
print(EFA_fit_MCQ_CN$loadings, cutoff = 0.3)
EFA_fit_MCQ_CN <- fa(MCQ_CN,
nfactors = 5,
rotate = "oblimin",
fm="ml")
EFA_fit_MCQ_CN
print(EFA_fit_MCQ_CN$loadings, cutoff = 0.3)
EFA_fit_MCQ_CN <- fa(MCQ_CN,
nfactors = 3,
rotate = "oblimin",
fm="ml")
EFA_fit_MCQ_CN
print(EFA_fit_MCQ_CN$loadings, cutoff = 0.3)
EFA_fit_MCQ_CN <- fa(MCQ_CN[7:30],
nfactors = 3,
rotate = "oblimin",
fm="ml")
EFA_fit_MCQ_CN <- fa(MCQ_CN[7:30],
nfactors = 6,
rotate = "oblimin",
fm="ml")
EFA_fit_MCQ_CN
print(EFA_fit_MCQ_CN$loadings, cutoff = 0.3)
#Kaiser Criterion
ev<- eigen(cor(MCQ_CN))
ev$values
sum(ev$values > 1)
sum(ev$values > .7)
#Kaiser Criterion
ev<- eigen(cor(MCQ_CN))
ev$values
sum(ev$values > 1)
sum(ev$values > .7)
#scree plot and parallel analysis
scree(MCQ_CN, pc=FALSE)
fa.parallel(MCQ_CN,
fm="ml",
fa="fa")
EFA_fit_MCQ_CN <- fa(MCQ_CN[7:30],
nfactors = 2,
rotate = "oblimin",
fm="ml")
EFA_fit_MCQ_CN
print(EFA_fit_MCQ_CN$loadings, cutoff = 0.3)
print(EFA_fit_MCQ_CN$loadings)
print(EFA_fit_MCQ_CN$loadings, cutoff = 0.3)
(MCQ_CN_GM_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6 + MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10 + MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14 + MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18 + MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22 + MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26 + MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
NK =~ MCQ_2 + MCQ_7 + MCQ_14 + MCQ_17 + MCQ_20 + MCQ_25 + MCQ_28
')
MCQ_CN_GM_fit <- cfa(
model = MCQ_CN_GM_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_GM_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
semPaths(MCQ_CN_GM_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
(MCQ_CN_GM_model <- '
GM =~ MCQ_1 + MCQ_2 + MCQ_3 + MCQ_4 + MCQ_5 + MCQ_6 + MCQ_7 + MCQ_8 + MCQ_9 + MCQ_10 + MCQ_11 + MCQ_12 + MCQ_13 + MCQ_14 + MCQ_15 + MCQ_16 + MCQ_17 + MCQ_18 + MCQ_19 + MCQ_20 + MCQ_21 + MCQ_22 + MCQ_23 + MCQ_24 + MCQ_25 + MCQ_26 + MCQ_27 + MCQ_28 + MCQ_29 + MCQ_30
NK =~ MCQ_2 + MCQ_7 + MCQ_14 + MCQ_17 + MCQ_20 + MCQ_25 + MCQ_28
')
MCQ_CN_GM_fit <- cfa(
model = MCQ_CN_GM_model,
data = MCQ_CN,
std.lv = TRUE)
summary(MCQ_CN_GM_fit,
standardized = TRUE,
rsquare = TRUE,
fit.measures=TRUE)
semPaths(MCQ_CN_GM_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
semPaths(MCQ_CN_GM_fit,
whatLabels = "std",
what = "std",
layout = "tree1",
edge.label.cex = 1)
semPaths(MCQ_CN_GM_fit,
whatLabels = "std",
what = "std",
layout = "tree2",
edge.label.cex = 1)
#Kaiser Criterion
ev<- eigen(cor(MCQ_CN))
ev$values
sum(ev$values > 1)
sum(ev$values > .7)
#scree plot and parallel analysis
scree(MCQ_CN, pc=FALSE)
fa.parallel(MCQ_CN,
fm="ml",
fa="fa")
EFA_fit_MCQ_CN <- fa(MCQ_CN[7:30],
nfactors = 2,
rotate = "oblimin",
fm="ml")
EFA_fit_MCQ_CN
print(EFA_fit_MCQ_CN$loadings, cutoff = 0.3)
print(EFA_fit_MCQ_CN$loadings)
##fit indices
EFA_fit_MCQ_CN$rms  # Root mean square of the residuals (lower the better)
EFA_fit_MCQ_CN$RMSEA # root mean squared error of approximation (lower the better)
EFA_fit_MCQ_CN$TLI  # tucker lewis index
1- ((EFA_fit_MCQ_CN$STATISTIC-EFA_fit_MCQ_CN$dof)/
(EFA_fit_MCQ_CN$null.chisq-EFA_fit_MCQ_CN$null.dof))  #CFI
MCQ_IRT = mirt(data = MCQ_CN,
model = 1, #this is for one factor
itemtype = "gpcmIRT" #generalized partial credit model
)
summary(MCQ_IRT)
plot(MCQ_IRT, type = "trace")
plot(MCQ_IRT, type = "info")
#itemplot(MCQ_IRT, 1, type = "trace")
itemplot(MCQ_IRT, 1, type = "info")
plot(MCQ_IRT, type = "info")
coef(MCQ_IRT, IRTpars = T)
summary(MCQ_IRT)
#person fit
fscores(MCQ_IRT) #factor score for each participants
